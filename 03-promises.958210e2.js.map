{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBA0BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KAELH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIb,SAASQ,EAAMT,EAAUC,GACvBX,EAAAoB,OAAOC,QAAQ,sBAAoBX,QAAiBC,M,CAOtD,SAASW,EAASZ,EAAUC,GAC1BX,EAAAoB,OAAOG,QAAQ,uBAAqBb,QAAeC,M,CA/CrDT,EAAKC,KAAKqB,iBAAiB,UAAUC,IACnCA,EAAEC,iBACF,IAAIC,EAAaC,OAAO1B,EAAKI,WAAWuB,OAExC,IAAK,IAAIC,EAAI,EAAGA,GAAK5B,EAAKM,YAAYqB,MAAOC,GAAG,EAC9CrB,EAAcqB,EAAGH,GACdI,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBW,EAASZ,EAAUC,GACnBqB,QAAQC,IAAI,uBAAqBvB,QAAiBC,MAAU,IAE7DuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBQ,EAAMT,EAASC,GACfqB,QAAQC,IAAI,sBAAoBvB,QAAiBC,MAAU,IAE/DgB,GAAcC,OAAO1B,EAAKK,UAAUsB,OAG5B3B,EAAKI,WAAWuB,KAAK","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notify from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  valueDelay: document.querySelector('input[name=\"delay\"]'),\n  valueStep: document.querySelector('input[name=\"step\"]'),\n  valueAmount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  let countDelay = Number(refs.valueDelay.value);\n\n  for (let i = 1; i <= refs.valueAmount.value; i+=1) {\n    createPromise(i, countDelay)\n      .then(({ position, delay }) => {\n        onSucces(position, delay)\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        error(position,delay);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    countDelay += Number(refs.valueStep.value);\n  }\n\n  const x = refs.valueDelay.value;\n  // console.log(refs.valueDelay.value);\n  // console.log(refs.valueStep.value);\n  // console.log(refs.valueAmount.value);\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, rejeck) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        rejeck({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction error(position, delay) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`), {\n    clickToClose: true,\n    position: 'center-top',\n    timeout: 5000,\n  };\n}\n\nfunction onSucces(position, delay) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`), {\n    clickToClose: true,\n    position: 'center-top',\n    timeout: 5000,\n  };\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","valueDelay","valueStep","valueAmount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","rejeck","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$error","Notify","failure","$47d4ff9957288465$var$onSucces","success","addEventListener","e","preventDefault","countDelay","Number","value","i","then","console","log","catch"],"version":3,"file":"03-promises.958210e2.js.map"}